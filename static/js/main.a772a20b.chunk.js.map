{"version":3,"sources":["App.js","index.js"],"names":["prevObj","prevColor","App","props","state","colors","mainArr","bind","handelRestart","sort","a","b","Math","random","window","location","reload","className","array","this","onClick","Component","Block","map","color","i","key","id","objCount","Click","isToggleOn","handleClick","setTimeout","setState","isCoincidenceClick","classCoincidence","backColor","style","backgroundColor","ReactDOM","render","document","getElementById"],"mappings":"uJAqDIA,EAASC,E,mEAlDPC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,OAAQ,EAAKC,WAG3B,EAAKA,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBANJ,E,sDAajB,MAFe,CAAC,MAAO,SAAU,OAAQ,OAAQ,SAAU,SAAU,QAAS,SAAU,MAAO,SAAU,OAAQ,OAAQ,SAAU,SAAU,QAAS,UAC5HE,MAFX,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,c,sCAOpCC,OAAOC,SAASC,W,+BAKhB,OACE,yBAAKC,UAAU,aACb,4BACE,kBAAC,EAAD,CAAOC,MAAOC,KAAKf,MAAMC,UAE3B,yBAAKY,UAAU,gBACb,4BAAQG,QAASD,KAAKX,eAAe,uBAAGS,UAAU,2B,GA7B1CI,aAoCZC,E,uKASF,OANeH,KAAKhB,MAAMe,MAAMK,KAAI,SAACC,EAAOC,GAC1C,OACE,wBAAIC,IAAKD,GACP,kBAAC,EAAD,CAAOD,MAAOA,EAAOG,GAAIF,EAAGC,IAAKD,Y,GANvBJ,aAcIO,EAAW,EAE7BC,E,kDACJ,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAC0B,YAAY,GAG1B,EAAKC,YAAc,EAAKA,YAAYxB,KAAjB,gBALF,E,gEAQE,IAAD,OAClByB,YAAW,WACT,EAAKC,UAAS,SAAA7B,GAAK,MAAK,CACtB0B,YAAY,QAEb,O,oCAGU,IAAD,OAERF,EAAW,GAAK5B,IAAYmB,OAC9BA,KAAKc,UAAS,SAAA7B,GAAK,MAAK,CACtB0B,YAAY,MAGG,IAAbF,IACF5B,EAAUmB,KACVlB,EAAYkB,KAAKhB,MAAMqB,OAGP,IAAbI,GAAoBT,KAAKhB,MAAMqB,QAAUvB,EAC5C+B,YAAW,WACThC,EAAQiC,SAAS,CAACH,YAAY,IAC9B,EAAKG,SAAS,CAACH,YAAY,IAC3BF,EAAW,EACX5B,EAAU,KACT,KACoB,IAAb4B,GAAoBT,KAAKhB,MAAMqB,QAAUvB,GACjD+B,YAAW,WACThC,EAAQiC,SAAS,CAACC,oBAAoB,IACtC,EAAKD,SAAS,CAACC,oBAAoB,IACnCN,EAAW,IACV,KAIPA,O,+BAMA,IAAMO,EAAoBhB,KAAKf,MAAM8B,mBAAqB,SAAW,GAC/DE,EAAYjB,KAAKf,MAAM0B,WAAX,UAA2BX,KAAKhB,MAAMqB,OAAtC,OACpB,OACE,yBAAKP,UAAS,cAASkB,GAAoBR,GAAIR,KAAKhB,MAAMwB,GAAIP,QAASD,KAAKY,YAAaM,MAAO,CAACC,gBAAgB,GAAD,OAAKF,U,GAtDvGf,aA4DLnB,I,MC9GfqC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a772a20b.chunk.js","sourcesContent":["import React, { Component } from 'react'\n//import Tiles from './Tiles'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {colors: this.mainArr()};\n  \n    // Эта привязка обязательна для работы `this` в колбэке.\n    this.mainArr = this.mainArr.bind(this)\n    this.handelRestart = this.handelRestart.bind(this)      \n  }\n\n  mainArr() {\n    const random = (a, b) => 0.5 - Math.random();\n    const colors = [\"red\", \"yellow\", \"blue\", \"pink\", \"purple\", \"violet\", \"black\", \"orange\", \"red\", \"yellow\", \"blue\", \"pink\", \"purple\", \"violet\", \"black\", \"orange\"];\n    const colorsSort = colors.sort(random);\n    return colorsSort\n  }\n  \n  handelRestart() {    \n    window.location.reload()\n  }  \n\n  render() { \n\n    return (\n      <div className='container'>\n        <ul>\n          <Block array={this.state.colors} />    \n        </ul>\n        <div className='cont-buttons'>\n          <button onClick={this.handelRestart}><i className=\"fas fa-redo-alt\"></i></button>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Block extends Component {\n  \n  render() {\n    const blocks = this.props.array.map((color, i) => {\n      return (           \n        <li key={i}>          \n          <Click color={color} id={i} key={i} />\n        </li>\n          )})\n    return blocks\n  }  \n  \n}\n\nlet prevObj, prevColor, objCount = 0;\n\nclass Click extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // Эта привязка обязательна для работы `this` в колбэке.\n    this.handleClick = this.handleClick.bind(this);          \n  } \n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState(state => ({\n        isToggleOn: false\n      }))\n    }, 3000)\n  }\n  \n  handleClick() { \n    \n    if (objCount < 2 && prevObj !== this) {\n      this.setState(state => ({\n        isToggleOn: true\n      }));      \n\n      if (objCount === 0) {\n        prevObj = this;\n        prevColor = this.props.color;\n      }\n\n      if ((objCount === 1) && (this.props.color !== prevColor)) {\n        setTimeout(() => {  \n          prevObj.setState({isToggleOn: false})        \n          this.setState({isToggleOn: false}) \n          objCount = 0;\n          prevObj = \"\";          \n        }, 500);               \n      } else if ((objCount === 1) && (this.props.color === prevColor)) {          \n          setTimeout(() => {\n            prevObj.setState({isCoincidenceClick: true})        \n            this.setState({isCoincidenceClick: true})               \n            objCount = 0;          \n          }, 500);\n            \n      }\n      \n      objCount++;\n    }\n  }  \n\n  render() {\n    \n      const classCoincidence =  this.state.isCoincidenceClick ? ' coinc' : '';  \n      const backColor = this.state.isToggleOn ? `${this.props.color}` : `gray`;\n    return (\n      <div className={`tile${classCoincidence}`} id={this.props.id} onClick={this.handleClick} style={{backgroundColor: `${backColor}`}}/>\n    );\n  }\n}\n\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}