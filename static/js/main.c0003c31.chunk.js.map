{"version":3,"sources":["background.jpg","context.js","Todo/TodoItem.js","Todo/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","TodoItem","todo","toggleTodo","useContext","color","hidden","className","isCoincidence","style","backgroundColor","onClick","id","TodoList","todos","listStyle","margin","padding","width","map","i","key","App","useState","mainArr","setTodos","start","setStart","count","setCount","isColor","setIsColor","pastId","setPastId","coincCount","setCoincCount","sort","a","b","Math","random","Provider","value","setTimeout","backgroundImage","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0003c31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.046015c3.jpg\";","import React from 'react'\n\nconst Context = React.createContext()\n\nexport default Context","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport Context from '../context'\n\nfunction TodoItem({ todo }) {    \n\n    const { toggleTodo } = useContext(Context)\n    const color = todo.hidden ? 'gray' : todo.color\n    const className = todo.isCoincidence ? 'hide' : 'tile'\n\n    return (\n        <li style={{backgroundColor: `${color}`}} className={className} onClick={() => toggleTodo(todo.id, todo.color)}></li>\n    )\n}\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nexport default TodoItem","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoItem from './TodoItem'\n\nfunction TodoList({ todos }) {\n    const styles = {\n        listStyle: 'none',\n        margin: 0,\n        padding: 0,\n        width: '480px'\n    }\n    return (\n        <ul style={styles}>\n            {todos.map((todo, i) => {\n                return (\n                    <TodoItem key={i} todo={todo}/>\n                )\n            })}\n        </ul>\n    )\n}\n\nTodoList.propTypes = {\n    todos: PropTypes.array.isRequired\n}\n\nexport default TodoList","import React, { useState, /*useEffect*/ } from 'react';\nimport './App.css'\nimport TodoList from './Todo/TodoList';\nimport Context from './context'\nimport background from './background.jpg'\n\nfunction App() {\n  const [todos, setTodos] = useState(mainArr())\n  const [start, setStart] = useState(false)\n  const [count, setCount] = useState(0)\n  const [isColor, setIsColor] = useState('')\n  const [pastId, setPastId] = useState('')\n  const [coincCount, setCoincCount] = useState(0)\n\n  function mainArr() {\n    const random = (a, b) => 0.5 - Math.random();\n    const colors = [\n      {id: 0, hidden: false, color: \"red\", isCoincidence: false},\n      {id: 1, hidden: false, color: \"yellow\", isCoincidence: false},\n      {id: 2, hidden: false, color: \"blue\", isCoincidence: false},\n      {id: 3, hidden: false, color: \"pink\", isCoincidence: false},\n      {id: 4, hidden: false, color: \"purple\", isCoincidence: false},\n      {id: 5, hidden: false, color: \"violet\", isCoincidence: false},\n      {id: 6, hidden: false, color: \"black\", isCoincidence: false},\n      {id: 7, hidden: false, color: \"orange\", isCoincidence: false},\n      {id: 8, hidden: false, color: \"red\", isCoincidence: false},\n      {id: 9, hidden: false, color: \"yellow\", isCoincidence: false},\n      {id: 10, hidden: false, color: \"blue\", isCoincidence: false},\n      {id: 11, hidden: false, color: \"pink\", isCoincidence: false},\n      {id: 12, hidden: false, color: \"purple\", isCoincidence: false},\n      {id: 13, hidden: false, color: \"violet\", isCoincidence: false},\n      {id: 14, hidden: false, color: \"black\", isCoincidence: false},\n      {id: 15, hidden: false, color: \"orange\", isCoincidence: false},\n    ];\n    const colorsSort = colors.sort(random);\n    return colorsSort\n  }\n\n  /*useEffect( () => {\n    setTodos(\n      todos.map( todo => {      \n        todo.hidden = true\n        return todo\n    }))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])*/\n\n  function handleStart() {\n    setTodos(\n      todos.map( todo => {      \n        todo.hidden = true\n        return todo\n    }))\n    setStart(true)\n  } \n  \n  function handleUpdate() {    \n      setTodos(mainArr())\n      setCoincCount(0)\n  }\n\n  function toggleTodo(id, color) {\n    if (start) {\n      if (count < 2) {\n        setTodos(\n          todos.map( todo => {\n          if (todo.id === id) {\n            todo.hidden = !todo.hidden\n          }\n          return todo\n        }))\n        setCount(count + 1)\n        setIsColor(color)\n        setPastId(id)\n\n        if (count === 1) {\n          if (color === isColor && id !== pastId) {\n            setTimeout(() => {\n              setTodos(\n                todos.map( todo => {\n                if (todo.id === id || todo.id === pastId) {\n                  todo.isCoincidence = true\n                }\n                return todo\n              }))\n              setCount(0)\n              setCoincCount(coincCount + 1)\n            }, 500)            \n          } else {\n            setTimeout(() => {\n              setTodos(\n                todos.map( todo => {      \n                  todo.hidden = true\n                  return todo\n              }))\n              setCount(0)\n            }, 500)\n          }  \n        }\n               \n      }    \n    }     \n  }  \n\n  return (    \n    <Context.Provider value={{ toggleTodo }}>\n      <div className='container' style={{backgroundImage: `url(${background})`}}>\n      <h1>Funny tiles</h1>\n      <div className='app'>\n        {coincCount === 8 ? <p className='joy'>Congratulation!</p> : <TodoList todos = { todos }/>}\n      </div>\n      <div className='navigation'>\n        <button onClick={handleUpdate}>Update</button>\n        <button onClick={handleStart}>Start</button>      \n      </div>      \n    </div>\n    </Context.Provider>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}